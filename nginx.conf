
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

# db declare
 upstream database {
    postgres_server 127.0.0.1 dbname=rohkdb user=postgres password=postgres;
  }

# db decalare end

    sendfile        off;

    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;


# api start

     location /module1 {
      postgres_pass database;
      rds_json  on;
      postgres_query    HEAD GET  "SELECT * FROM module1";
      postgres_rewrite  HEAD GET  no_rows 410;
     }

     location /module {
      postgres_pass database;
      rds_json  on;
      postgres_query    HEAD GET  "SELECT * FROM module";
      postgres_rewrite  HEAD GET  no_rows 410;
     }

     location /hub {
      postgres_pass database;
      rds_json  on;
      postgres_query    HEAD GET  "SELECT * FROM hub";
      postgres_rewrite  HEAD GET  no_rows 410;
     }

     location /getModulesByHubID {
      postgres_pass database;
      rds_json  on;

     if ($arg_id) {
        postgres_query HEAD GET "SELECT m.name, m.path FROM module m join module_hub mh on mh.module_id = m.id join hub h on mh.hub_id = h.id WHERE h.name = '$arg_id'";

#       postgres_query    HEAD GET  "SELECT * FROM module where id=$arg_id";
        postgres_rewrite  HEAD GET  no_rows 404;
     }

}

#     location /getModulesByHub {
#      postgres_pass database;
 #     set_form_input $hubid;
 #     postgres_escape $hub_escaped $hubid;
#      rds_json  on;
#      postgres_query    HEAD GET  "SELECT * FROM module where id='2'";
#      postgres_rewrite  HEAD GET  no_rows 410;

     location = /insert {

# decode url start
        #rewrite ^ $request_uri;

# decode end

    client_body_temp_path /tmp;

    dav_methods PUT DELETE MKCOL COPY MOVE;

    create_full_put_path  on;
    dav_access            group:rw  all:rw;

    postgres_pass database;

            # reads the form parameter foo into the variable $foo
            set_form_input $name;
            set_form_input $path;
        set_form_input $description;
        set_form_input $actors;
        set_form_input $cultural_group;
        set_form_input $demographic_female_elder;
        set_form_input $demographic_male_elder;
        set_form_input $demographic_female_adult;
        set_form_input $demographic_male_adult;
        set_form_input $demographic_female_teen;
        set_form_input $demographic_male_teen;
        set_form_input $demographic_female_child;
        set_form_input $demographic_male_child;

        #    postgres_escape $name_escaped $name;
         #   postgres_escape $path_escaped $path;

           postgres_query POST "INSERT INTO module (name, path, description, actors) VALUES (url_decode('$name'), url_decode('$path'), url_decode('$description'), url_decode('$actors'))";

# postgres_query POST "INSERT INTO module (name, path) VALUES (url_decode('$name'),url_decode('$path'))";

      }

    # To allow POST on static pages
    error_page  405     =200 $uri;

# api end

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
         #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
	