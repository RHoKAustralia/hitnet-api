#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

# db credentials declare
 upstream database {
    postgres_server 127.0.0.1 dbname=rohkdb user=postgres password=postgres;
  }

# db declare end

    sendfile        off;

    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;


# api start

     location /module {
      postgres_pass database;
      rds_json  on;
      postgres_query    HEAD GET  "SELECT * FROM module";
      postgres_rewrite  HEAD GET  no_rows 410;
     }

     location /hub {
      postgres_pass database;
      rds_json  on;
      postgres_query    HEAD GET  "SELECT * FROM hub";
      postgres_rewrite  HEAD GET  no_rows 410;
     }

     location /getModulesByHubID {
		postgres_pass database;
		rds_json  on;

		if ($arg_id) {
			postgres_query HEAD GET "SELECT m.name, m.path FROM module m join module_hub mh on mh.module_id = m.id join hub h on mh.hub_id = h.id WHERE h.name = '$arg_id'";
			postgres_rewrite  HEAD GET  no_rows 404;
		}
	 }
     location = /insert {
		client_body_temp_path /tmp;

		dav_methods PUT DELETE MKCOL COPY MOVE;

		create_full_put_path  on;
		dav_access            group:rw  all:rw;

		postgres_pass database;
        set_form_input $name;
        set_form_input $path;
        set_form_input $description;
        set_form_input $actors;
        set_form_input $cultural_group;
        set_form_input $demographic_female_elder;
        set_form_input $demographic_male_elder;
        set_form_input $demographic_female_adult;
        set_form_input $demographic_male_adult;
        set_form_input $demographic_female_teen;
        set_form_input $demographic_male_teen;
        set_form_input $demographic_female_child;
        set_form_input $demographic_male_child;
         
		 # prevent sql injection attack

         # postgres_escape $name_escaped $name;
         # postgres_escape $path_escaped $path;

        postgres_query POST "INSERT INTO module (name, path, description, actors) VALUES (url_decode('$name'), url_decode('$path'), url_decode('$description'), url_decode('$actors'))";
      }

    # To allow POST on static pages
    error_page  405     =200 $uri;

# api end

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }

}
